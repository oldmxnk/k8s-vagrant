name: Deploy Argo CD
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Deploy Ingress Controller
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Service
        metadata:
          name: ingress-nginx-controller
          namespace: ingress-nginx
        spec:
          type: NodePort
          ports:
            - name: http
              port: 80
              targetPort: 80
              nodePort: 31080  # Change this to any available port
            - name: https
              port: 443
              targetPort: 443
              nodePort: 31443  # Change this to any available port
          selector:
            app.kubernetes.io/name: ingress-nginx
        EOF
    - name: Wait for Ingress Controller
      run: |
        sleep 20  # Wait for the Ingress controller to be fully up and running
    - name: Deploy Argo CD
      run: |
        kubectl get namespace argocd || kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        kubectl patch svc argocd-server -n argocd --type='json' -p='[{"op": "replace", "path": "/spec/type", "value": "NodePort"}, {"op": "replace", "path": "/spec/ports/0/nodePort", "value": 32080}]'
    - name: Get Local IP Address
      id: get-ip
      run: |
        LOCAL_IP=$(hostname -I | awk '{print $1}')
        echo "LOCAL_IP=${LOCAL_IP}" >> $GITHUB_ENV
    - name: Wait for Argo CD to wake up
      run: |
        sleep 20  # Wait for the Argo CD to be fully up and running
    - name: Print Argo CD Access Information
      run: |
        echo "Argo CD can be accessed at http://${LOCAL_IP}:32080"
        echo "Password is as below:"
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
  
